AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ashback

  Sample SAM Template for ashback

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:

  MyWebsite:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: my-fantastic-website123123

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyWebsite
      PolicyDocument:
        # Id: Policy1671643510907
        Version: 2012-10-17
        Statement:
        - Action:
          # Sid: Stmt1671643457785
          - 's3:GetObject'
          Effect: Allow
          Resource: !Join  #arn:aws:s3:::my-fantastic-website123
            - ""
            - - "arn:aws:s3:::"
              - !Ref MyWebsite
              - /*
          Principal: "*"

  MyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: 'hi.deanmascoll.com'
      # SubjectAlternativeNames:
      #   - hello.deanmascoll.com
      ValidationMethod: DNS

        

  myRoute53RSG:
    Type: AWS::Route53::RecordSetGroup
    Properties: 
      HostedZoneId: Z05104803M8CQELKBYO30
      RecordSets: 
        - Name: hi.deanmascoll.com
          Type: A
          AliasTarget: 
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt myDistribution.DomainName

  myDistribution: 
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: !Ref MyCertificate #"arn:aws:acm:us-east-1:055359723675:certificate/d8dc3681-4cfd-42bb-af00-6b61a655ea98"
          SslSupportMethod: sni-only
        Aliases:
          - hi.deanmascoll.com
        Origins:
          - DomainName: my-fantastic-website123123.s3.amazonaws.com
            Id: my-fantastic-website123123.s3.amazonaws.com
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        Enabled: 'true'
        Comment: Some comment
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: my-fantastic-website123123.s3.amazonaws.com 
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: allow-all

  MyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: count
          AttributeType: N
        # - AttributeName: SK
        #   AttributeType: S
      KeySchema:
        - AttributeName: count
          KeyType: HASH
        # - AttributeName: SK
        #   KeyType: RANGE #
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1



  HelloWorldFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: hello_world/
      Policies:
      - AmazonDynamoDBFullAccess
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /hello
            Method: get

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  MyTableName:
    Description: The name of the MyTable DynamoDB table
    Value: !Ref MyTable
